<!-- ---------------------------------------------------------------------
// 数値入力操作
// 作成者：M.Jinbo
// 作成日：2009/03/25
// 概要  ：数字キー以外のキー押下時の機能を停止する。
//-------------------------------------------------------------------- -->

<PUBLIC:COMPONENT >

  <PUBLIC:ATTACH event="ondocumentready"   FOR="element"  onevent="_ondocumentready()" />

  <PUBLIC:METHOD NAME="refresh" />
  <PUBLIC:METHOD NAME="require" />
  <PUBLIC:METHOD NAME="error" />
  <PUBLIC:METHOD NAME="focus" />
  <PUBLIC:METHOD NAME="enable" />
  <PUBLIC:METHOD NAME="getValue" />
  <PUBLIC:METHOD NAME="setValue" />

</PUBLIC:COMPONENT>

<SCRIPT>

//+----------------------------------------------------------------------------
// ELEMENT VARIABLES
//-----------------------------------------------------------------------------

var _prop = new Object(); //プロパティ連想配列
var oORG = new Object();  //状態保存オブジェクト
var oINP;

//+----------------------------------------------------------------------------
// ELEMENT EVENT
//-----------------------------------------------------------------------------

//ondocumentready時
function _ondocumentready() {

    //SPANタグのプロパティを取得
    _prop.enabled      = getProperty(element, "enabled", true);
    _prop.format       = getProperty(element, "format", "8,0");
    _prop.comma        = eval(getProperty(element, "comma", false));
    _prop.fillChar     = getProperty(element, "fillChar", "");
    _prop.defaultfocus = getProperty(element, "defaultFocus", false);
    _prop.required     = getProperty(element, "required", false);

    //INPUTタグのオブジェクトを取得
    oINP = element.getElementsByTagName("INPUT").item(0);

    //INPUTタグのプロパティに値を設定
    oINP.format =_prop.format;
    oINP.comma =_prop.comma;
    oINP.fillChar =_prop.fillChar;
    oINP.style.behavior = "url(../common/htc/bh_num.htc)";

/*    //水平位置の指定がない場合
    if (oINP.style.textAlign == "") {
        //右揃え
        oINP.style.textAlign = "right";
    }*/
    element.dataItem = oINP.dataFld;

    oORG.elm_defaultfocus = element.defaultfocus;
    oORG.inp_tabIndex = oINP.tabIndex;
    oORG.inp_readOnly = oINP.readOnly;
    oORG.inp_stylebackgroundColor = oINP.style.backgroundColor;

    if (_prop.enabled == "false") {
        enable(false);
    }

}

//+----------------------------------------------------------------------------
// ELEMENT METHOD
//-----------------------------------------------------------------------------
function refresh() {
    alert("This Function is not available.");
}

function focus() {
    oINP.focus();
}

function error() {
    oINP.error = true;
}

function require() {
   if (oINP.value == "") {
       oINP.style.borderColor = requireBorderColor;
       return false;
   } else {
       oINP.style.borderColor = "";
       return true;
   }
}

function enable(bool) {

    if (bool == false) {
        element.defaultfocus = false;
        oINP.tabIndex = -1;
        oINP.readOnly = true;
        oINP.style.backgroundColor = disableBackgroundColor;
    } else {
        element.defaultfocus = oORG.elm_defaultfocus;
        oINP.tabIndex = oORG.inp_tabIndex;
        oINP.readOnly = oORG.inp_readOnly;
        oINP.style.backgroundColor = oORG.inp_stylebackgroundColor;
    }

}

function getValue() {
    return oINP.number;
}

function setValue(value) {
    oINP.value = value;
}

//+----------------------------------------------------------------------------
// VE EVENT FUNCTIONS
//-----------------------------------------------------------------------------



//+----------------------------------------------------------------------------
// FUNCTIONS
//-----------------------------------------------------------------------------



</SCRIPT>
