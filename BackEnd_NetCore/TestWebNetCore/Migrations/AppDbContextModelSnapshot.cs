// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestWebNetCore.Data;

#nullable disable

namespace TestWebNetCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestWebNetCore.Models.Common", b =>
                {
                    b.Property<string>("cd_category")
                        .HasColumnType("text");

                    b.Property<string>("cd_common")
                        .HasColumnType("text");

                    b.Property<string>("cd_create")
                        .HasColumnType("text");

                    b.Property<string>("cd_update")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dt_create")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("flg_use")
                        .HasColumnType("boolean");

                    b.Property<string>("nm_common")
                        .HasColumnType("text");

                    b.HasKey("cd_category", "cd_common");

                    b.ToTable("Common");
                });

            modelBuilder.Entity("TestWebNetCore.Models.Customer", b =>
                {
                    b.Property<string>("cd_customer")
                        .HasColumnType("text");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("cd_create")
                        .HasColumnType("text");

                    b.Property<string>("cd_update")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dt_create")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("nm_customer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<decimal?>("points")
                        .HasColumnType("numeric");

                    b.HasKey("cd_customer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("TestWebNetCore.Models.Order", b =>
                {
                    b.Property<string>("cd_order")
                        .HasColumnType("text");

                    b.Property<string>("cd_branch")
                        .HasColumnType("text");

                    b.Property<string>("cd_create")
                        .HasColumnType("text");

                    b.Property<string>("cd_customer")
                        .HasColumnType("text");

                    b.Property<string>("cd_payment_method")
                        .HasColumnType("text");

                    b.Property<string>("cd_staff")
                        .HasColumnType("text");

                    b.Property<string>("cd_status")
                        .HasColumnType("text");

                    b.Property<string>("cd_update")
                        .HasColumnType("text");

                    b.Property<string>("delivery_address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dt_create")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_delivery")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_order")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("numeric");

                    b.HasKey("cd_order");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TestWebNetCore.Models.OrderDetail", b =>
                {
                    b.Property<string>("cd_order")
                        .HasColumnType("text");

                    b.Property<string>("cd_order_detail")
                        .HasColumnType("text");

                    b.Property<string>("cd_product")
                        .HasColumnType("text");

                    b.Property<string>("cd_unit")
                        .HasColumnType("text");

                    b.Property<decimal?>("price")
                        .HasColumnType("numeric");

                    b.Property<int?>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("cd_order", "cd_order_detail");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("TestWebNetCore.Models.Product", b =>
                {
                    b.Property<string>("cd_product")
                        .HasColumnType("text");

                    b.Property<string>("cd_category")
                        .HasColumnType("text");

                    b.Property<string>("cd_create")
                        .HasColumnType("text");

                    b.Property<string>("cd_size")
                        .HasColumnType("text");

                    b.Property<string>("cd_status")
                        .HasColumnType("text");

                    b.Property<string>("cd_update")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dt_create")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("nm_product")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("price")
                        .HasColumnType("numeric");

                    b.HasKey("cd_product");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestWebNetCore.Models.User", b =>
                {
                    b.Property<string>("cd_user")
                        .HasColumnType("text");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("cd_branch")
                        .HasColumnType("text");

                    b.Property<string>("cd_create")
                        .HasColumnType("text");

                    b.Property<string>("cd_position")
                        .HasColumnType("text");

                    b.Property<string>("cd_update")
                        .HasColumnType("text");

                    b.Property<DateTime?>("dt_create")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("dt_update")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("nm_user")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.HasKey("cd_user");

                    b.ToTable("User");
                });
#pragma warning restore 612, 618
        }
    }
}
